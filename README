
  ------- Text Highlight --------
  Pentru aceasta problema am decis sa creez un vector de pointeri
  la siruri de caractere pe care l-am alocat dinamic astfel incat 
  sa ofere memorie pentru N pointeri la caractere.
  Am folosit un string buffer static in care 
  am citit fiecare linie introdusa , la finalul careia am 
  aduagat un terminator NULL pentru a marca sfarsitul liniei.
  Apoi am alocat dinamic memorie pe heap pentru vectorul de caractere
  si am copiat linia citita in buffer in spatiul alocat.

  Pentru a stoca keyword-urile am folosit tot un vector de pointeri
  la caractere pe care l-am initializat cu keyword-urile predefinite.
  
  Pentru rezolvarea problemei am inceput prin a parcurge string-urile
  si a afisa linia de text .
  Am creat un vector ale caror elemente le-am initializat cu 0
  la inceput si in care voi pune valoarea 1 acolo unde caracterul
  trebuie subliniat cu underscore.
  Am parcurs cu un for lista de keywords-uri  si cu un alt for 
  caracterele de pe linia curenta.
  In variabila key_length am salvat lungimea keyword-ului curent , 
  iar in len_first_key am salvat lungimea primului cuvant din keyword .

  Pentru a gasi un cuvant din linia curenta de text ce trebuie subliniat ,
  am pus mai multe conditii care trebuie indeplinite , iar in caz contrar,
  programul trece la urmatoarea iteratie , adica
  (indexul urmatorului caracter de pe linie), iar verificarile se reiau .

  Astfel ca : 
    -> Daca primul caracter al keyword-ului curent
     nu se potriveste cu caracterul curent de pe linie, 
     se trece la urmatoarea iteratie.
    -> Daca conditia precedenta a fost indeplinita,
     verificam daca caracterul de pe pozitia precedenta 
     reprezinta un delimitator, adica este intr-adevar inceputul
     unui cuvant nou si nu exista posibilitatea de a avea 
     potrivire pe un substring .In caz contrar, se trece
     la urmatorul caracter.
    -> Daca si aceasta conditie e indeplinita, verificam sa avem 
     de asemenea un delimitator si la finalul cuvantului.

     Pentru a asigura faptul ca subliniem atat caracterele ce fac
     parte din keyword dar si spatiile libere in cazul keyword-urilor 
     formate din doua cuvinte, am creat o functie extra_spaces ce are
     rolul de a numara spatiile libere care sunt in plus , pana la 
     intalnirea unui caracter.
     Vom folosi aceasta functie doar in cazul in care keyword-ul 
     este de format din 2 cuvinte .
     -> Am comparat apoi caracterele din prima parte a keywordu-lui 
     cu caracterele de pe linie ,comparand doar len_first_key caractere ,
     adica lungimea primului cuvant din keyword.
     Daca caracterele se potrivesc,  inseamna ca am gasit un keyword 
     complet prezent pe linia de text si trebuie sa-l subliniem .
  In cazul in care keyword-ul este format dintr-un singur cuvant,
  apelam direct functia matching_key ce primeste ca parametrii 
  index ul primului caracter ce trebuie subliniat, al ultimului 
  caracter ce trebuie subliniat , cat si vectorul. 
  Functia retine valoarea 1 pe pozitiile respective.
     -> Daca insa keyword-ul are mai mult de un cuvant , 
      comparam caracter cu caracter si a doua parte 
      (al doilea cuvant din keyword cu caracterele ce urmeaza 
       dupa spatiul/spatiile libere).
  Daca si acestea se potrivesc , inseamna ca avem o potrivire completa 
  pentru un keyword de 2 cuvinte ,si vom apela din nou functia matching_key 
  cu indexul de pornire si cel de oprire tinand cont si de spatiile libere
  in plus ce pot exista.
  Dupa ce am cautat in toata lista de keyword-uri pentru linia de text 
  curenta, afisam vectorul de sublinieri , inlocuind pozitiile in care
  am salvat valoarea 1 cu underscore, si algoritmul se reia pana cand
  am terminat de cautat in toate string-urile.
  La finalul programului eliberam memoria alocata dinamic pentru vectorul 
  de pointeri la caractere si pentru sirurile de caractere.

   
